//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/ThirdPersonInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ThirdPersonInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ThirdPersonInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ThirdPersonInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerOnGround"",
            ""id"": ""735ca606-6334-42bf-b704-edae7e5b935e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d3119397-c910-44e2-97bd-aa935012aa28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fc167637-e3e0-4ab8-9506-20e0937f4054"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9d700c51-001b-43b6-bad8-25a3d020cb6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c04163b-64a9-42ef-a2f2-797bc7d22bc1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d5866e31-b245-4836-8b5d-15bce089cd27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca590525-7cf9-4aaf-a6c2-cea9dc49231f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9f9cd836-5321-4b2a-b62e-1fde15c7ccc7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""126287db-4245-4a10-906f-564177b88559"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9027c5b9-edcc-47aa-ba7c-84c42cc3d2f7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d529aced-5b26-4875-bb7d-3bba9266af0a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f8fdedf-1ec7-4658-8055-76109b51166b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4ae4b47-4123-451a-acae-aa01af43196b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42b56169-b14f-431d-9171-a4486a064bd1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""6e86e0f5-673d-4ec8-a708-c25685a332ef"",
            ""actions"": [
                {
                    ""name"": ""UnlockMouse"",
                    ""type"": ""Button"",
                    ""id"": ""c40f769d-f44b-4896-b219-6c6cb2cda0b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c575d483-884d-480d-93ca-b378537f364d"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnlockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOnGround
        m_PlayerOnGround = asset.FindActionMap("PlayerOnGround", throwIfNotFound: true);
        m_PlayerOnGround_Movement = m_PlayerOnGround.FindAction("Movement", throwIfNotFound: true);
        m_PlayerOnGround_Look = m_PlayerOnGround.FindAction("Look", throwIfNotFound: true);
        m_PlayerOnGround_Jump = m_PlayerOnGround.FindAction("Jump", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_UnlockMouse = m_Test.FindAction("UnlockMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOnGround
    private readonly InputActionMap m_PlayerOnGround;
    private IPlayerOnGroundActions m_PlayerOnGroundActionsCallbackInterface;
    private readonly InputAction m_PlayerOnGround_Movement;
    private readonly InputAction m_PlayerOnGround_Look;
    private readonly InputAction m_PlayerOnGround_Jump;
    public struct PlayerOnGroundActions
    {
        private @ThirdPersonInputs m_Wrapper;
        public PlayerOnGroundActions(@ThirdPersonInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerOnGround_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerOnGround_Look;
        public InputAction @Jump => m_Wrapper.m_PlayerOnGround_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOnGround; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOnGroundActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerOnGroundActions instance)
        {
            if (m_Wrapper.m_PlayerOnGroundActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnLook;
                @Jump.started -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerOnGroundActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerOnGroundActions @PlayerOnGround => new PlayerOnGroundActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_Test_UnlockMouse;
    public struct TestActions
    {
        private @ThirdPersonInputs m_Wrapper;
        public TestActions(@ThirdPersonInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnlockMouse => m_Wrapper.m_Test_UnlockMouse;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @UnlockMouse.started -= m_Wrapper.m_TestActionsCallbackInterface.OnUnlockMouse;
                @UnlockMouse.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnUnlockMouse;
                @UnlockMouse.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnUnlockMouse;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UnlockMouse.started += instance.OnUnlockMouse;
                @UnlockMouse.performed += instance.OnUnlockMouse;
                @UnlockMouse.canceled += instance.OnUnlockMouse;
            }
        }
    }
    public TestActions @Test => new TestActions(this);
    public interface IPlayerOnGroundActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnUnlockMouse(InputAction.CallbackContext context);
    }
}
